@charset "UTF-8";

@layer global, main, elements, important;

@import url("./global.css") layer(global);

@layer important {
	:root.loading * {
		transition: none;
		animation: none;
	}

	[hidden] {
		display: none;
	}
}

@layer main {
	@media screen {
		:root:not(.light-theme) {
			color-scheme: dark;
			--color: #fbfbfe;
			--hue: 247deg;
			--saturation: 10%;
			--background-lightness: 10%;
			--gray-lightness-step: 8%;
			--shadow-color: #0004;
			--item-shadow-color: #0004;

			--accent-hue: 245deg;
			--accent-saturation: 70%;
			--accent-lightness: 55%;
		}
	}

	:root {
		color-scheme: light;
		--color: black;
		--hue: 240deg;
		--saturation: 15%;
		--background-lightness: 100%;
		--gray-lightness-step: -5%;
		--shadow-color: var(--transparent-gray-3);
		--item-shadow-color: transparent;

		--accent-hue: 235deg;
		--accent-saturation: 80%;
		--accent-lightness: 65%;
	}
	
	:root {
		--background: hsl(var(--hue) var(--saturation) var(--background-lightness));
		--gray-1: hsl(var(--hue) var(--saturation) calc(var(--background-lightness) + 1 * var(--gray-lightness-step)));
		--gray-2: hsl(var(--hue) var(--saturation) calc(var(--background-lightness) + 2 * var(--gray-lightness-step)));
		--gray-3: hsl(var(--hue) var(--saturation) calc(var(--background-lightness) + 3 * var(--gray-lightness-step)));
		--gray-4: hsl(var(--hue) var(--saturation) calc(var(--background-lightness) + 4 * var(--gray-lightness-step)));
		--gray-5: hsl(var(--hue) var(--saturation) calc(var(--background-lightness) + 5 * var(--gray-lightness-step)));
		--transparent-background: hsl(var(--hue) var(--saturation) calc(var(--background-lightness) + 2 * var(--gray-lightness-step)) / 30%);
		--transparent-gray-1: hsl(var(--hue) var(--saturation) calc(var(--background-lightness) + 4 * var(--gray-lightness-step)) / 30%);
		--transparent-gray-2: hsl(var(--hue) var(--saturation) calc(var(--background-lightness) + 6 * var(--gray-lightness-step)) / 30%);
		--transparent-gray-3: hsl(var(--hue) var(--saturation) calc(var(--background-lightness) + 8 * var(--gray-lightness-step)) / 30%);

		--titlebar-area-inline-start: env(titlebar-area-x, 0px);
		--titlebar-area-inline-size: env(titlebar-area-width, 0px);
		--titlebar-area-inline-end: calc(100dvi - env(titlebar-area-x, 0px) - env(titlebar-area-width, 0px));
		--titlebar-area-block-start: env(titlebar-area-y, 0px);
		--titlebar-area-block-size: env(titlebar-area-height, 0px);
		--titlebar-area-block-end: calc(100dvb - env(titlebar-area-y, 0px) - env(titlebar-area-height, 0px));
		
		
		--px: calc(1rem / 16);

		--scrollbar-color: hsl(var(--accent-hue) var(--accent-saturation) var(--accent-lightness));
		scrollbar-color: var(--scrollbar-color) transparent;

		font-family: system-ui, sans-serif;
		background-color: var(--background);
		color: var(--color);
		-webkit-text-size-adjust: none;
		text-size-adjust: none;
	}

	body {
		box-sizing: border-box;
		margin: 0;
		block-size: 100dvb;
		/* overflow-y: hidden; */
		/* display: grid;
		grid-template: auto 1fr / 1fr;
		grid-template-areas:
			"titlebar"
			"main"; */
		display: flex;
		flex-direction: column;
		/* overflow: hidden; */
		/* overflow: clip; */
	}

	header {
		grid-area: titlebar;
	}

	main {
		flex-grow: 1;
		flex-basis: 0;
		grid-area: main;
		display: flex;
		flex-direction: column;
		/* overflow: clip; */
		/* overflow: hidden; */
		overflow: auto;
		/* overflow: clip; */
		box-sizing: border-box;
		contain: layout;
		/* contain: paint; */
		/* contain: size layout style paint; */
		/* contain: layout paint style inline-size; */
		/* contain: size; */
		/* background-clip: border-box; */
		/* overflow-clip-margin: border-box; */

		/* isolation: isolate; */
	}

	:root:is([data-transition=toggling-view], [data-transition=changing-folder]) main {
		view-transition-name: main-content;
	}

	/* Arabic (ar), Hebrew (iw), Pashto (ps), Persian (fa), Sindhi (sd), Urdu (ur), Uyghur (ug), Yiddish (yi) */
	:root:is(.translated-rtl, :lang(ar), :lang(iw), :lang(ps), :lang(fa), :lang(sd), :lang(ur), :lang(ug), :lang(yi)) {
		direction: rtl;

		--titlebar-area-inline-start: calc(100dvi - env(titlebar-area-x, 0px) - env(titlebar-area-width, 0px));
		--titlebar-area-inline-end: env(titlebar-area-x, 0px);
	}

	@media not all and (display-mode: browser) {
		body {
			overscroll-behavior-block: none;
		}
	}

	@media print {
		:root {
			-webkit-print-color-adjust: exact;
			print-color-adjust: exact;
		}

		body {
			display: block;
			block-size: unset;
			overflow: unset;
		}

		main {
			display: block;
			overflow: unset;
		}

		c-header {
			display: none;
		}

		@page {
			size: A4 portrait;
			margin: 0;
		}
	}

	dialog.messagebox {
		display: flex;
		flex-direction: column;
		gap: .6rem;
		padding: .8rem 1rem;
		border-radius: .5rem;
		background-color: var(--gray-2);
		box-shadow: 0 0 4rem var(--shadow-color);
		max-inline-size: calc(min(100% - 6rem, 40rem))
	}

	dialog.messagebox .message {
		white-space: pre-wrap;
		overflow-wrap: break-word;
	}

	dialog.messagebox .input {
		/* border: 2px solid hsl(var(--accent-hue) var(--accent-saturation) calc(var(--accent-lightness) + 5%)); */
		border: 2px solid royalBlue;
		/* border: 2px solid royalBlue; */
		padding: .4em .6em;
		border-radius: .3rem;
	}

	dialog.messagebox .input:focus-visible {
		outline: none;
		background-color: var(--gray-1);
	}

	dialog.messagebox .buttons {
		display: flex;
		gap: .5rem;
		justify-content: end;
	}

	dialog.messagebox button:focus-visible {
		outline: 2px solid var(--button-color);
		outline-offset: 2px;
	}

	dialog.messagebox button.ok {
		color-scheme: dark;
		/* --button-color: hsl(var(--accent-hue) var(--accent-saturation) calc(var(--accent-lightness) + 5%)); */
		--button-color: royalBlue;
		/* --button-color: royalBlue; */
		color: white;
	}

	dialog.messagebox button.cancel {
		--button-color: var(--gray-3);
		outline-color: var(--gray-5);
	}

	dialog.messagebox button {
		background-color: var(--button-color);
		padding: .4em .8em;
		border-radius: .2rem;
	}

	dialog.messagebox::backdrop {
		background: none;
		--backdrop-filter: blur(.125rem);
		-webkit-backdrop-filter: var(--backdrop-filter);
		backdrop-filter: var(--backdrop-filter);
	}

	dialog.export[open] {
		display: flex;
		flex-direction: column;
		gap: .6rem;
		inline-size: min(100% - 6rem, 50rem);
		/* block-size: calc(100% - 12rem); */
		border-radius: .8rem;
		background-color: var(--transparent-gray-2);
		--backdrop-filter: blur(2rem);
		-webkit-backdrop-filter: var(--backdrop-filter);
		backdrop-filter: var(--backdrop-filter);
		box-shadow: 0 0 4rem var(--shadow-color);
	}

	dialog.export::backdrop {
		background: none;
	}

	dialog.export h2 {
		font-weight: 500;
		font-size: 1.2rem;
	}

	dialog.export > ul {
		display: flex;
	}

	dialog.export > ul > li {
		flex-grow: 1;
		flex-shrink: 1;
		flex-basis: 0;
		position: relative;
		transition: background-color .1s, border-color .1s;
	}

	dialog.export > ul > li:not(:first-of-type) {
		border-inline-start: 1px solid var(--transparent-gray-3);
	}

	dialog.export > ul > li:hover {
		background-color: var(--transparent-gray-2);
		border-radius: .5rem;
		border-inline-start-color: transparent;
	}

	dialog.export > ul > li:hover + li {
		border-inline-start-color: transparent;
	}

	dialog.export > ul > li button {
		display: flex;
		flex-direction: column;
		gap: 1rem;
		align-items: center;
		block-size: 100%;
		padding: .6rem;
		inline-size: 100%;
		block-size: 100%;
		box-sizing: border-box;
		/* --icon-size: min(6rem, 80%); */
		--icon-size: min(3rem, 80%);
	}

	dialog.export > ul > li button::before {
		opacity: .8;
	}

	dialog.export button.close {
		display: grid;
		place-content: center;
		float: right;
		float: inline-end;
		inline-size: 2rem;
		block-size: 2rem;
		border-radius: .3rem;
		transition: background-color .2s;
	}

	dialog.export button.close:hover {
		background-color: var(--transparent-gray-3);
	}

	:root {
		--transition-direction: 1;
	}

	:root:is([data-view=editor], .transition-reverse) {
		--transition-direction: -1;
	}

	:root:is([data-transition=toggling-view], [data-transition=changing-folder])::view-transition-old(main-content) {
		animation: .15s ease-out both fade-out;
	}

	:root:is([data-transition=toggling-view], [data-transition=changing-folder])::view-transition-new(main-content) {
		animation: .15s ease-out both fade-in;
	}

	:root[data-transition=toggling-view]::view-transition-group(header) {
		animation-duration: .25s;
	}

	@keyframes fade-out {
		to {
			translate: calc(var(--transition-direction) * -1 * 20%) 0;
			opacity: 0;
		}
	}

	@keyframes fade-in {
		from {
			translate: calc(var(--transition-direction) * 1 * 20%) 0;
			opacity: 0;
		}
	}

	:root[data-transition="toggling-layout"]::view-transition-group(*) {
		animation-duration: 10s;
		animation-duration: .3s;
		animation-timing-function: ease-in-out;
	}

	:root[data-transition="toggling-layout"]::view-transition-image-pair(*) {
		inline-size: 100%;
		block-size: 100%;
		animation-timing-function: inherit;
		--halfway-size: 80%;
	}

	:root[data-transition="toggling-layout"]::view-transition-image-pair(text-input) {
		animation-name: text-input;
	}

	:root[data-transition="toggling-layout"]::view-transition-image-pair(html-output) {
		animation-name: html-output;
	}

	:root[data-transition="toggling-layout"]::view-transition-old(*),
	:root[data-transition="toggling-layout"]::view-transition-new(*) {
		inset: 0;
		inline-size: 100%;
		block-size: 100%;
		animation-timing-function: inherit;
	}

	:root[data-transition="toggling-layout"]::view-transition-old(text-input),
	:root[data-transition="toggling-layout"]::view-transition-new(text-input) {
		--animation-name: text-input;
	}

	:root[data-transition="toggling-layout"]::view-transition-old(html-output),
	:root[data-transition="toggling-layout"]::view-transition-new(html-output) {
		--animation-name: html-output;
	}

	@keyframes text-input {
		50% {
			inline-size: var(--halfway-size);
			block-size: var(--halfway-size);
		}
	}

	@keyframes html-output {
		50% {
			inline-size: var(--halfway-size);
			block-size: var(--halfway-size);
			inset-inline-start: calc(100% - var(--halfway-size));
			inset-block-start: calc(100% - var(--halfway-size));
		}
	}
}
