@charset "UTF-8";

@layer global, main, elements, important;

@import url("./global.css") layer(global);

@layer important {
	:root.loading * {
		transition: none;
		animation: none;
	}

	[hidden] {
		display: none;
	}
}

@layer main {
	@media not print {
		:root:not(.light-theme) {
			color-scheme: dark;

			--color: #fbfbfe;
			--hue: 290.4deg;
			--chroma: 4%;
			--background-lightness: 20%;
			--gray-lightness-step: 9%;
			--shadow-color: #0004;
			--item-shadow-color: #0004;

			--accent-hue: 277deg;
			--accent-chroma: 57%;
			--accent-lightness: 48%;
		}
	}

	:root {
		color-scheme: light;

		--color: black;
		--hue: 290.4deg;
		--chroma: 2.5%;
		--background-lightness: 100%;
		--gray-lightness-step: -5%;
		--shadow-color: var(--transparent-gray-3);
		--item-shadow-color: transparent;

		--accent-hue: 277deg;
		--accent-lightness: 60%;
		--accent-chroma: 62%;
	}
	
	:root {
		--background: oklch(var(--background-lightness) var(--chroma) var(--hue));
		--gray-1: oklch(calc(var(--background-lightness) + 1 * var(--gray-lightness-step)) var(--chroma) var(--hue));
		--gray-2: oklch(calc(var(--background-lightness) + 2 * var(--gray-lightness-step)) var(--chroma) var(--hue));
		--gray-3: oklch(calc(var(--background-lightness) + 3 * var(--gray-lightness-step)) var(--chroma) var(--hue));
		--gray-4: oklch(calc(var(--background-lightness) + 4 * var(--gray-lightness-step)) var(--chroma) var(--hue));
		--gray-5: oklch(calc(var(--background-lightness) + 5 * var(--gray-lightness-step)) var(--chroma) var(--hue));
		--transparent-background: oklch(calc(var(--background-lightness) + 2 * var(--gray-lightness-step)) var(--chroma) var(--hue) / 30%);
		--transparent-gray-1: oklch(calc(var(--background-lightness) + 4 * var(--gray-lightness-step)) var(--chroma) var(--hue) / 30%);
		--transparent-gray-2: oklch(calc(var(--background-lightness) + 6 * var(--gray-lightness-step)) var(--chroma) var(--hue) / 30%);
		--transparent-gray-3: oklch(calc(var(--background-lightness) + 8 * var(--gray-lightness-step)) var(--chroma) var(--hue) / 30%);

		--titlebar-area-inline-start: env(titlebar-area-x, 0px);
		--titlebar-area-inline-size: env(titlebar-area-width, 0px);
		--titlebar-area-inline-end: calc(100dvi - var(--titlebar-area-inline-start) - var(--titlebar-area-inline-size));
		--titlebar-area-block-start: env(titlebar-area-y, 0px);
		--titlebar-area-block-size: env(titlebar-area-height, 0px);
		--titlebar-area-block-end: calc(100dvb - var(--titlebar-area-block-start) - var(--titlebar-area-block-size));

		--px: calc(1rem / 16);

		--scrollbar-color: oklch(var(--accent-lightness) var(--accent-chroma) var(--accent-hue));
		--scrollbar-hover-color: oklch(calc(var(--accent-lightness) + 10%) var(--accent-chroma) var(--accent-hue));
		scrollbar-color: var(--scrollbar-color) transparent;

		font-family: system-ui, sans-serif;
		background-color: var(--background);
		color: var(--color);
		overflow-wrap: break-word;
		-webkit-tap-highlight-color: transparent;
	}

	body {
		box-sizing: border-box;
		margin: 0;
		block-size: 100dvb;
		/* overflow-y: hidden; */
		/* display: grid;
		grid-template: auto 1fr / 1fr;
		grid-template-areas:
			"titlebar"
			"main"; */
		display: flex;
		flex-direction: column;
		/* overflow: hidden; */
		/* overflow: clip; */
	}

	header {
		grid-area: titlebar;
	}

	main {
		flex-grow: 1;
		flex-basis: 0;
		grid-area: main;
		display: flex;
		flex-direction: column;
		/* overflow: clip; */
		overflow: hidden;
		/* overflow: auto; */
		/* overflow: clip; */
		box-sizing: border-box;
		contain: layout;
		/* contain: paint; */
		/* contain: size layout style paint; */
		/* contain: layout paint style inline-size; */
		/* contain: size; */
		/* background-clip: border-box; */
		/* overflow-clip-margin: border-box; */

		/* isolation: isolate; */
	}

	:root:is([data-transition=toggling-view]) main {
		view-transition-name: main-content;
	}

	/* Arabic (ar), Hebrew (iw), Pashto (ps), Persian (fa), Sindhi (sd), Urdu (ur), Uyghur (ug), Yiddish (yi) */
	:root:is(.translated-rtl, :lang(ar), :lang(iw), :lang(ps), :lang(fa), :lang(sd), :lang(ur), :lang(ug), :lang(yi)) {
		direction: rtl;

		--titlebar-area-inline-start: calc(100dvi - env(titlebar-area-x, 0px) - env(titlebar-area-width, 0px));
		--titlebar-area-inline-end: env(titlebar-area-x, 0px);
	}

	@media not all and (display-mode: browser) {
		body {
			overscroll-behavior-block: none;
		}
	}

	@media print {
		:root {
			-webkit-print-color-adjust: exact;
			print-color-adjust: exact;
		}

		body {
			display: block;
			block-size: unset;
			overflow: unset;
		}

		main {
			display: block;
			overflow: unset;
		}

		c-header {
			display: none;
		}

		@page {
			size: A4 portrait;
			margin: 0;
		}
	}
	
	dialog.messagebox {
		display: flex;
		flex-direction: column;
		gap: .6rem;
		padding: .8rem 1rem;
		border-radius: .5rem;
		background-color: var(--gray-2);
		box-shadow: 0 0 4rem var(--shadow-color);
		max-inline-size: calc(min(100% - 6rem, 40rem));

		& .message {
			white-space: pre-wrap;
		}

		& .input {
			border: 2px solid royalBlue;
			padding: .4em .6em;
			border-radius: .3rem;

			&:focus-visible {
				outline: none;
				background-color: var(--gray-1);
			}
		}

		& .buttons {
			display: flex;
			gap: .5rem;
			justify-content: end;
		}

		& button.ok {
			color-scheme: dark;
			--button-color: royalBlue;
			color: white;
		}

		& button.cancel {
			--button-color: var(--gray-3);
			outline-color: var(--gray-5);
		}

		& button {
			background-color: var(--button-color);
			padding: .4em .8em;
			border-radius: .2rem;

			&:focus-visible {
				outline: 2px solid var(--button-color);
				outline-offset: 2px;
			}	
		}

		&::backdrop {
			background: none;
			--blur-radius: .2rem;
			--backdrop-filter: blur(var(--blur-radius));
			-webkit-backdrop-filter: var(--backdrop-filter);
			backdrop-filter: var(--backdrop-filter);
			animation: blur-radius .3s;
		}
	}

	@keyframes blur-radius {
		from {
			-webkit-backdrop-filter: blur(0rem);
			backdrop-filter: blur(0rem);
		}
	}

	dialog.export {
		&[open] {
			display: flex;
			flex-direction: column;
			gap: .6rem;
			inline-size: min(100% - 6rem, 50rem);
			border-radius: .8rem;
			background-color: var(--transparent-gray-2);
			--backdrop-filter: blur(2rem);
			-webkit-backdrop-filter: var(--backdrop-filter);
			backdrop-filter: var(--backdrop-filter);
			box-shadow: 0 0 4rem var(--shadow-color);
		}

		&::backdrop {
			background: none;
		}

		& h2 {
			font-weight: 500;
			font-size: 1.2rem;
		}

		& > ul {
			display: flex;

			& > li {
				flex-grow: 1;
				flex-shrink: 1;
				flex-basis: 0;
				position: relative;
				transition: background-color .1s, border-color .1s;

				&:not(:first-of-type) {
					border-inline-start: 1px solid var(--transparent-gray-3);
				}
		
				&:hover {
					background-color: var(--transparent-gray-2);
					border-radius: .5rem;
					border-inline-start-color: transparent;

					& + li {
						border-inline-start-color: transparent;
					}
				}

				& button {
					display: flex;
					flex-direction: column;
					gap: 1rem;
					align-items: center;
					block-size: 100%;
					padding: .6rem;
					inline-size: 100%;
					block-size: 100%;
					box-sizing: border-box;
					/* --icon-size: min(6rem, 80%); */
					--icon-size: min(3rem, 80%);
			
					&::before {
						opacity: 80%;
					}
				}
			}
	
		}


		& button.close {
			display: grid;
			place-content: center;
			float: right;
			float: inline-end;
			inline-size: 2rem;
			block-size: 2rem;
			border-radius: .3rem;
			transition: background-color .2s;

			&:hover {
				background-color: var(--transparent-gray-3);
			}
		}
	}

	:root {
		--transition-direction: 1;

		&:is([data-transition=toggling-view], [data-transition=changing-folder]) {
			&:is([data-view=editor], .transition-reverse) {
				--transition-direction: -1;
			}
		
			&::view-transition-group(*) {
				animation-duration: .2s;
				animation-timing-function: ease;
			}
		
			&::view-transition-old(main-content) {
				animation-name: fade-out;
			}
		
			&::view-transition-new(main-content) {
				animation-name: fade-in;
			}
			
		}

		&[data-transition="toggling-layout"] {
			& c-header {
				view-transition-name: header;
			}

			&::view-transition-group(*) {
				animation-duration: .3s;
				animation-timing-function: ease-in-out;
			}

			&::view-transition-image-pair(*) {
				inline-size: 100%;
				block-size: 100%;
				--halfway-size: 80%;
			}

			&::view-transition-image-pair(text-input),
			&::view-transition-image-pair(html-output) {
				inset: auto;
				animation-name: layout-toggle;
			}

			&::view-transition-image-pair(text-input) {
				inset-block-start: 0;
				inset-inline-start: 0;
			}
			
			&::view-transition-image-pair(html-output) {
				inset-block-end: 0;
				inset-inline-end: 0;

			}

			&::view-transition-old(*),
			&::view-transition-new(*) {
				inset: 0;
				inline-size: 100%;
				block-size: 100%;
			}
			
		}
	}

	@keyframes layout-toggle {
		50% {
			inline-size: var(--halfway-size);
			block-size: var(--halfway-size);
		}
	}

	@keyframes fade-out {
		to {
			translate: calc(var(--transition-direction) * -1 * 20%) 0;
			opacity: 0%;
		}
	}

	@keyframes fade-in {
		from {
			translate: calc(var(--transition-direction) * 1 * 20%) 0;
			opacity: 0%;
		}
	}
}

@property --blur-radius {
	syntax: "<length>";
	initial-value: 0rem;
	inherits: true;
}
